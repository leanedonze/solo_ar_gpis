# coding: utf8

import numpy as np
import gamepadClient as gC

# Add ROS part
import rospy
from std_msgs.msg import Float32MultiArray
import time

listening = True

class Joystick:
    """Joystick-like controller that outputs the reference velocity in local frame

    Args:
        predefined (bool): use either a predefined velocity profile (True) or a gamepad (False)
    """

    def __init__(self, predefined, multi_simu=False):

        # Reference velocity in local frame
        self.v_ref = np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]).T

        self.reduced = False
        self.stop = False

        dT = 0.0020  # velocity reference is updated every ms
        fc = 100  #  cutoff frequency
        y = 1 - np.cos(2*np.pi*fc*dT)
        self.alpha = -y+np.sqrt(y*y+2*y)

        tc = 0.02  #  cutoff frequency at 50 Hz
        dT = 0.0020  # velocity reference is updated every ms
        #dT = 0.01 
        #dT = 1.0
        self.alpha = dT / tc

        # Bool to modify the update of v_ref
        # Used to launch multiple simulations
        self.multi_simu = multi_simu

        # If we are using a predefined reference velocity (True) or a joystick (False)
        self.predefined = predefined

        # Joystick variables (linear and angular velocity and their scaling for the joystick)
        self.vX = 0.
        self.vY = 0.
        self.vYaw = 0.
        self.VxScale = 0.6
        self.VyScale = 1.2
        self.vYawScale = 1.6

        self.Vx_ref = 0.3
        self.Vy_ref = 0.0
        self.Vw_ref = 0.0

        # Y, B, A and X buttons (in that order)
        self.northButton = False
        self.eastButton = False
        self.southButton = False
        self.westButton = False

        # My variables
        self.count = 0
        self.speed = 0.4
        self.trajectory = []
        self.pos = 0
        self.dT = 0.2
        self.listener()
        self.time = 0.0
        self.start_time = 0.0
        self.wait = 0
    
    ################################################################################################
    # ROS
    ####################################################################################################
    def subscriberCallBack(self,data):
        global listening
        if listening :
            rospy.loginfo(" I received the trajectory")
            self.trajectory = data.data
        listening = False

    def listener(self):
        rospy.init_node('subscriberNode', anonymous=True)
        rospy.Subscriber("trajectory", Float32MultiArray, self.subscriberCallBack)
        print("Done")
        rospy.spin()
    
    ###################################################################################################3

    def update_v_ref(self, k_loop, velID):
        """Update the reference velocity of the robot along X, Y and Yaw in local frame by
        listening to a gamepad handled by an independent thread

        Args:
            k_loop (int): numero of the current iteration
            velID (int): Identifier of the current velocity profile to be able to handle different scenarios
        """

        if self.predefined:
            if self.multi_simu:
                self.update_v_ref_multi_simu(k_loop)
            else:
                self.update_v_ref_predefined(k_loop, velID)
        else:
            self.update_v_ref_gamepad(k_loop)

        return 0

    def update_v_ref_gamepad(self, k_loop):
        """Update the reference velocity of the robot along X, Y and Yaw in local frame by
        listening to a gamepad handled by an independent thread

        Args:
            k_loop (int): numero of the current iteration
        """

        # # Create the gamepad client
        # if k_loop == 0:
        #     self.gp = gC.GamepadClient()

        # # Get the velocity command based on the position of joysticks
        # self.vX = self.gp.leftJoystickX.value * self.VxScale
        # self.vY = self.gp.leftJoystickY.value * self.VyScale
        # self.vYaw = self.gp.rightJoystickX.value * self.vYawScale

        ###########################################################################################
        # Update the attribute self.trajectory
        #self.listener()

        # Copy from the terminal
        # Going forward trajectory
        #self.trajectory = [-0.07256905734539032, -0.6263778805732727, -0.06815985590219498, -0.6263778805732727, -0.06375062465667725, -0.6263778805732727, -0.05934135243296623, -0.6263778805732727, -0.05493205040693283, -0.6263778805732727, -0.05052271857857704, -0.6263778805732727, -0.046113353222608566, -0.6263778805732727, -0.041703954339027405, -0.6263778805732727, -0.037294529378414154, -0.6263778805732727, -0.03288507089018822, -0.6263778805732727, -0.02847558818757534, -0.6263778805732727, -0.024066073819994926, -0.6263778805732727, -0.019656533375382423, -0.6263778805732727, -0.015246967785060406, -0.6263778805732727, -0.010837375186383724, -0.6263778805732727, -0.006427756976336241, -0.6263778805732727, -0.002018114784732461, -0.6263778805732727, 0.0023915511555969715, -0.6263778805732727, 0.006801240146160126, -0.6263778805732727, 0.011210951022803783, -0.6263778805732727, 0.015620684251189232, -0.6263778805732727, 0.020030437037348747, -0.6263778805732727, 0.024440212175250053, -0.6263778805732727, 0.028850005939602852, -0.6263778805732727, 0.03325981646776199, -0.6263778805732727, 0.037669647485017776, -0.6263778805732727, 0.04207949712872505, -0.6263778805732727, 0.04648936167359352, -0.6263778805732727, 0.050899241119623184, -0.6263778805732727, 0.05530913919210434, -0.6263778805732727, 0.05971904844045639, -0.6263778805732727, 0.06412897258996964, -0.6263778805732727, 0.06853891164064407, -0.6263778805732727, 0.0729488655924797, -0.6263778805732727, 0.07735882699489594, -0.6263778805732727, 0.08176880329847336, -0.6263778805732727, 0.08617878705263138, -0.6263778805732727, 0.09058878570795059, -0.6263778805732727, 0.0949987918138504, -0.6263778805732727, 0.09940880537033081, -0.6263778805732727, 0.10381882637739182, -0.6263778805732727, 0.10822885483503342, -0.6263778805732727, 0.11263889074325562, -0.6263778805732727, 0.11704893410205841, -0.6263778805732727, 0.1214589774608612, -0.6263778805732727, 0.1258690357208252, -0.6263778805732727, 0.130279079079628, -0.6263778805732727, 0.13468915224075317, -0.6263778805732727, 0.13909921050071716, -0.6263778805732727, 0.14350926876068115, -0.6263778805732727, 0.14791934192180634, -0.6263778805732727, 0.15232940018177032, -0.6263778805732727, 0.1567394733428955, -0.6263778805732727, 0.1611495316028595, -0.6263778805732727, 0.1655595898628235, -0.6263778805732727, 0.16996966302394867, -0.6263778805732727, 0.17437972128391266, -0.6263778805732727, 0.17878976464271545, -0.6263778805732727, 0.18319982290267944, -0.6263778805732727, 0.18760986626148224, -0.6263778805732727, 0.19201990962028503, -0.6263778805732727, 0.19642993807792664, -0.6263778805732727, 0.20083996653556824, -0.6263778805732727, 0.20524999499320984, -0.6263778805732727, 0.20966000854969025, -0.6263778805732727, 0.21407000720500946, -0.6263778805732727, 0.21847999095916748, -0.6263778805732727, 0.2228899747133255, -0.6263778805732727, 0.22729994356632233, -0.6263778805732727, 0.23170991241931915, -0.6263778805732727, 0.2361198514699936, -0.6263778805732727, 0.24052979052066803, -0.6263778805732727, 0.24493969976902008, -0.6263778805732727, 0.24934960901737213, -0.6263778805732727, 0.253759503364563, -0.6263778805732727, 0.25816935300827026, -0.6263778805732727, 0.2625792324542999, -0.6263778805732727, 0.2669890522956848, -0.6263778805732727, 0.2713988721370697, -0.6263778805732727, 0.2758086621761322, -0.6263778805732727, 0.2802184522151947, -0.6263778805732727, 0.2846282124519348, -0.6263778805732727, 0.28903794288635254, -0.6263778805732727, 0.2934476435184479, -0.6263778805732727, 0.2978573143482208, -0.6263778805732727, 0.3022669851779938, -0.6263778805732727, 0.30667662620544434, -0.6263778805732727, 0.3110862374305725, -0.6263778805732727, 0.3154958188533783, -0.6263778805732727, 0.3199053704738617, -0.6263778805732727, 0.3243149220943451, -0.6263778805732727, 0.3287244141101837, -0.6263778805732727, 0.33313387632369995, -0.6263778805732727, 0.3375433087348938, -0.6263778805732727, 0.34195271134376526, -0.6263778805732727, 0.34636208415031433, -0.6263778805732727, 0.350771427154541, -0.6263778805732727, 0.3551807403564453, -0.6263778805732727, 0.3595900237560272, -0.6263778805732727, 0.36399924755096436, -0.6263778805732727]
        # Count around 6
        #self.trajectory = [-0.21670734882354736, -0.3908936679363251, -0.2135087251663208, -0.3927294909954071, -0.2103099375963211, -0.39456498622894287, -0.20711097121238708, -0.39640018343925476, -0.20391181111335754, -0.3982350826263428, -0.20071250200271606, -0.4000696837902069, -0.19751301407814026, -0.40190398693084717, -0.19431336224079132, -0.40373799204826355, -0.19111353158950806, -0.40557169914245605, -0.18791355192661285, -0.40740513801574707, -0.18471340835094452, -0.4092383086681366, -0.18151311576366425, -0.41107121109962463, -0.17831267416477203, -0.4129038155078888, -0.1751120686531067, -0.41473618149757385, -0.1719113290309906, -0.4165682792663574, -0.16871042549610138, -0.4184001386165619, -0.1655094027519226, -0.42023172974586487, -0.1623082309961319, -0.42206311225891113, -0.15910692512989044, -0.4238942265510559, -0.15590548515319824, -0.42572513222694397, -0.1527039259672165, -0.42755579948425293, -0.149502232670784, -0.4293862581253052, -0.14630043506622314, -0.4312165081501007, -0.14309850335121155, -0.4330465495586395, -0.1398964673280716, -0.43487638235092163, -0.1366943120956421, -0.4367060363292694, -0.13349205255508423, -0.4385354816913605, -0.130289688706398, -0.4403647780418396, -0.12708723545074463, -0.4421938955783844, -0.12388467788696289, -0.4440228343009949, -0.12068203091621399, -0.445851594209671, -0.11747930198907852, -0.4476802349090576, -0.11427648365497589, -0.4495086967945099, -0.1110735833644867, -0.4513370394706726, -0.10787061601877213, -0.4531652629375458, -0.10466756671667099, -0.454993337392807, -0.10146445780992508, -0.4568213224411011, -0.0982612818479538, -0.4586491584777832, -0.09505804628133774, -0.46047690510749817, -0.0918547585606575, -0.46230456233024597, -0.08865141868591309, -0.4641321301460266, -0.08544803410768509, -0.4659596085548401, -0.08224460482597351, -0.4677870273590088, -0.07904113829135895, -0.4696143865585327, -0.075837641954422, -0.4714416563510895, -0.07263411581516266, -0.47326889634132385, -0.06943055987358093, -0.47509607672691345, -0.06622698903083801, -0.47692322731018066, -0.0630233958363533, -0.4787503778934479, -0.059819795191287994, -0.4805774688720703, -0.05661618709564209, -0.48240455985069275, -0.05341257527470589, -0.4842316508293152, -0.05020896717905998, -0.4860587418079376, -0.047005362808704376, -0.48788586258888245, -0.043801769614219666, -0.48971298336982727, -0.04059819132089615, -0.4915401041507721, -0.03739463537931442, -0.4933673143386841, -0.03419110178947449, -0.49519452452659607, -0.03098759613931179, -0.49702179431915283, -0.02778412401676178, -0.49884912371635437, -0.024580689147114754, -0.5006765127182007, -0.02137729525566101, -0.5025039911270142, -0.018173947930336, -0.5043315291404724, -0.014970652759075165, -0.5061591863632202, -0.011767412535846233, -0.5079869627952576, -0.008564230985939503, -0.5098147988319397, -0.005361114162951708, -0.5116427540779114, -0.002158065792173147, -0.5134708285331726, 0.001044910284690559, -0.5152990221977234, 0.004247809294611216, -0.5171273350715637, 0.007450627163052559, -0.5189558267593384, 0.01065335888415575, -0.5207844376564026, 0.013856001198291779, -0.5226132273674011, 0.01705854944884777, -0.524442195892334, 0.020261000841856003, -0.5262713432312012, 0.023463347926735878, -0.5281006097793579, 0.026665590703487396, -0.5299301147460938, 0.02986772172152996, -0.5317597985267639, 0.03306973725557327, -0.5335896611213684, 0.03627163544297218, -0.535419762134552, 0.03947341442108154, -0.5372500419616699, 0.04267506301403046, -0.5390805602073669, 0.04587658494710922, -0.5409113168716431, 0.049077972769737244, -0.5427423119544983, 0.05227922275662422, -0.5445735454559326, 0.05548033118247986, -0.546405017375946, 0.05868129804730415, -0.5482367277145386, 0.06188211590051651, -0.550068736076355, 0.06508278101682663, -0.5519009232521057, 0.06828328967094421, -0.5537334680557251, 0.07148364931344986, -0.5555662512779236, 0.07468383759260178, -0.557399332523346, 0.07788386940956116, -0.5592326521873474, 0.08108372986316681, -0.5610663294792175, 0.08428342640399933, -0.5629002451896667, 0.08748294413089752, -0.5647345185279846, 0.09068229049444199, -0.5665690302848816, 0.09388145804405212, -0.5684038996696472, 0.09708044677972794, -0.5702390670776367, 0.10027924925088882, -0.5720745921134949]

        # Another try to count
        #self.trajectory = [-0.01668398082256317, -1.1124917268753052, -0.014779326505959034, -1.1022270917892456, -0.012874755077064037, -1.091962456703186, -0.010970384813845158, -1.081697702407837, -0.009066328406333923, -1.0714329481124878, -0.007162690628319979, -1.0611680746078491, -0.005259572993963957, -1.0509032011032104, -0.0033570686355233192, -1.0406380891799927, -0.0014552657958120108, -1.030372977256775, 0.00044575330684892833, -1.020107626914978, 0.002345912391319871, -1.0098421573638916, 0.004245140589773655, -0.9995765089988708, 0.006143373437225819, -0.9893106818199158, 0.008040551096200943, -0.9790446758270264, 0.0099366195499897, -0.9687784314155579, 0.01183153036981821, -0.9585119485855103, 0.013725240714848042, -0.9482452869415283, 0.015617712400853634, -0.9379783868789673, 0.017508912831544876, -0.9277112483978271, 0.01939881592988968, -0.9174438714981079, 0.021287396550178528, -0.9071762561798096, 0.02317463792860508, -0.8969084024429321, 0.02506052702665329, -0.8866403102874756, 0.02694505639374256, -0.8763719201087952, 0.028828222304582596, -0.8661033511161804, 0.030710024759173393, -0.8558344841003418, 0.03259046748280525, -0.8455653786659241, 0.034469567239284515, -0.8352959752082825, 0.03634732589125633, -0.8250263929367065, 0.03822376951575279, -0.8147565722465515, 0.040098920464515686, -0.8044864535331726, 0.041972797363996506, -0.7942161560058594, 0.04384543374180794, -0.783945620059967, 0.04571686312556267, -0.7736748456954956, 0.047587115317583084, -0.7634038925170898, 0.049456238746643066, -0.753132700920105, 0.0513242669403553, -0.7428613305091858, 0.053191252052783966, -0.7325897812843323, 0.055057235062122345, -0.7223180532455444, 0.05692227557301521, -0.7120461463928223, 0.05878642201423645, -0.7017740607261658, 0.060649726539850235, -0.691501796245575, 0.06251225620508194, -0.6812294125556946, 0.06437406688928604, -0.6709569096565247, 0.06623521447181702, -0.6606842875480652, 0.06809577345848083, -0.6504115462303162, 0.06995580345392227, -0.6401387453079224, 0.0718153715133667, -0.629865825176239, 0.07367455214262009, -0.6195928454399109, 0.0755334123969078, -0.609319806098938, 0.07739201933145523, -0.5990467071533203, 0.07925044745206833, -0.5887736082077026, 0.08110876381397247, -0.5785004496574402, 0.08296705037355423, -0.5682273507118225, 0.08482537418603897, -0.5579541921615601, 0.08668380975723267, -0.5476810932159424, 0.08854243159294128, -0.5374079942703247, 0.0904013067483902, -0.5271349549293518, 0.09226051717996597, -0.5168619751930237, 0.09412012249231339, -0.5065891146659851, 0.095980204641819, -0.49631625413894653, 0.09784083068370819, -0.4860435426235199, 0.09970206767320633, -0.4757709503173828, 0.10156398266553879, -0.4654984474182129, 0.10342664271593094, -0.4552260935306549, 0.10529011487960815, -0.44495388865470886, 0.10715445876121521, -0.43468186259269714, 0.10901973396539688, -0.42440998554229736, 0.11088600754737854, -0.4141382873058319, 0.11275331676006317, -0.4038667678833008, 0.11462173610925674, -0.39359548687934875, 0.11649129539728165, -0.38332438468933105, 0.11836205422878265, -0.37305349111557007, 0.12023405730724335, -0.3627828359603882, 0.12210733443498611, -0.3525124192237854, 0.12398193031549454, -0.3422422409057617, 0.125857874751091, -0.3319723308086395, 0.1277351975440979, -0.32170262932777405, 0.12961392104625702, -0.31143322587013245, 0.13149407505989075, -0.30116406083106995, 0.1333756446838379, -0.29089513421058655, 0.13525867462158203, -0.280626505613327, 0.13714316487312317, -0.270358145236969, 0.1390291005373001, -0.26009002327919006, 0.14091648161411285, -0.249822199344635, 0.1428052932024002, -0.23955462872982025, 0.14469552040100098, -0.2292873114347458, 0.14658716320991516, -0.21902026236057281, 0.1484801471233368, -0.20875345170497894, 0.15037448704242706, -0.19848689436912537, 0.1522700935602188, -0.1882205754518509, 0.15416695177555084, -0.17795449495315552, 0.15606500208377838, -0.16768862307071686, 0.15796416997909546, -0.1574229598045349, 0.1598643809556961, -0.1471574902534485, 0.16176559031009674, -0.1368921995162964, 0.16366766393184662, -0.12662707269191742, 0.16557055711746216, -0.11636210232973099, 0.16747413575649261, -0.1060972511768341, 0.16937831044197083, -0.09583251923322678]
        
        # Going on the right trajectory 
        # self.trajectory = [-0.9656035900115967, -2.2075729370117188, -0.9600654244422913, -2.19270920753479, -0.9545274972915649, -2.1778452396392822, -0.9489895701408386, -2.1629812717437744, -0.9434512257575989, -2.1481175422668457, -0.9379122257232666, -2.133254051208496, -0.9323722720146179, -2.1183907985687256, -0.926831066608429, -2.1035282611846924, -0.9212883710861206, -2.0886659622192383, -0.9157438278198242, -2.0738046169281006, -0.910197377204895, -2.0589439868927, -0.9046486616134644, -2.044084072113037, -0.8990975022315979, -2.0292251110076904, -0.8935437798500061, -2.01436710357666, -0.8879871964454651, -1.9995100498199463, -0.8824276924133301, -1.984654188156128, -0.8768650889396667, -1.969799518585205, -0.8712992072105408, -1.9549460411071777, -0.8657299280166626, -1.9400938749313354, -0.8601571917533875, -1.9252430200576782, -0.8545809388160706, -1.910393476486206, -0.8490009903907776, -1.895545244216919, -0.8434173464775085, -1.8806984424591064, -0.8378299474716187, -1.8658530712127686, -0.8322387337684631, -1.8510091304779053, -0.826643705368042, -1.8361666202545166, -0.8210448026657104, -1.8213255405426025, -0.8154420852661133, -1.806485891342163, -0.8098355531692505, -1.7916477918624878, -0.8042252063751221, -1.7768110036849976, -0.7986111044883728, -1.7619757652282715, -0.7929933071136475, -1.7471418380737305, -0.787371814250946, -1.732309341430664, -0.7817467451095581, -1.7174781560897827, -0.7761182188987732, -1.702648401260376, -0.7704862356185913, -1.6878198385238647, -0.7648510336875916, -1.672992467880249, -0.7592125535011292, -1.6581664085388184, -0.7535710334777832, -1.6433415412902832, -0.7479265928268433, -1.628517746925354, -0.7422793507575989, -1.6136950254440308, -0.7366294860839844, -1.5988733768463135, -0.7309771180152893, -1.584052562713623, -0.725322425365448, -1.569232702255249, -0.71966552734375, -1.5544136762619019, -0.7140066623687744, -1.539595365524292, -0.7083460092544556, -1.5247777700424194, -0.7026837468147278, -1.5099607706069946, -0.6970201134681702, -1.495144248008728, -0.6913551688194275, -1.4803283214569092, -0.6856892704963684, -1.465512752532959, -0.6800225377082825, -1.450697422027588, -0.674355149269104, -1.4358824491500854, -0.6686874032020569, -1.421067476272583, -0.6630194783210754, -1.4062527418136597, -0.657351553440094, -1.3914378881454468, -0.6516838669776917, -1.3766229152679443, -0.6460166573524475, -1.3618078231811523, -0.6403501033782959, -1.3469924926757812, -0.6346844434738159, -1.3321768045425415, -0.6290198564529419, -1.317360758781433, -0.6233565807342529, -1.302544116973877, -0.6176947951316833, -1.287726879119873, -0.6120347380638123, -1.2729090452194214, -0.606376588344574, -1.2580904960632324, -0.6007205247879028, -1.2432712316513062, -0.5950667858123779, -1.228450894355774, -0.5894154906272888, -1.2136297225952148, -0.5837668776512146, -1.1988075971603394, -0.5781211256980896, -1.1839842796325684, -0.5724783539772034, -1.1691598892211914, -0.5668386816978455, -1.1543341875076294, -0.561202347278595, -1.1395074129104614, -0.5555694103240967, -1.1246792078018188, -0.5499401092529297, -1.1098496913909912, -0.544314444065094, -1.095018744468689, -0.5386925339698792, -1.080186367034912, -0.5330745577812195, -1.0653525590896606, -0.527460515499115, -1.050517201423645, -0.5218504667282104, -1.0356804132461548, -0.5162445306777954, -1.0208419561386108, -0.5106427669525146, -1.0060020685195923, -0.5050451159477234, -0.99116051197052, -0.4994516372680664, -0.9763174057006836, -0.4938623309135437, -0.961472749710083, -0.4882771372795105, -0.9466265439987183, -0.4826960861682892, -0.9317787885665894, -0.4771190583705902, -0.9169294834136963, -0.4715460240840912, -0.9020786881446838, -0.46597686409950256, -0.8872264623641968, -0.4604114890098572, -0.8723728060722351, -0.4548497498035431, -0.8575177788734436, -0.44929152727127075, -0.842661440372467, -0.44373661279678345, -0.827803909778595, -0.43818485736846924, -0.8129451274871826, -0.43263599276542664, -0.7980853319168091, -0.4270898103713989, -0.7832244634628296, -0.4215461015701294, -0.7683627605438232, -0.4160045087337494, -0.75350022315979, -0.4104647636413574, -0.7386369705200195]
        
        # Going backward trajectory 
        #self.trajectory = [0.3583562970161438, -1.0683813095092773, 0.3528948724269867, -1.0703399181365967, 0.3474334180355072, -1.072298526763916, 0.3419719338417053, -1.0742570161819458, 0.33651041984558105, -1.076215386390686, 0.3310488760471344, -1.0781737565994263, 0.32558733224868774, -1.080132007598877, 0.3201257288455963, -1.082090139389038, 0.3146641254425049, -1.0840482711791992, 0.30920252203941345, -1.0860064029693604, 0.30374085903167725, -1.087964415550232, 0.2982792258262634, -1.0899224281311035, 0.2928175628185272, -1.091880440711975, 0.287355899810791, -1.0938383340835571, 0.2818942070007324, -1.0957963466644287, 0.2764325439929962, -1.0977542400360107, 0.2709708511829376, -1.0997121334075928, 0.2655091881752014, -1.1016701459884644, 0.2600474953651428, -1.1036280393600464, 0.2545858323574066, -1.1055859327316284, 0.24912415444850922, -1.1075439453125, 0.243662491440773, -1.1095019578933716, 0.2382008284330368, -1.1114598512649536, 0.2327391803264618, -1.1134178638458252, 0.22727754712104797, -1.1153759956359863, 0.22181591391563416, -1.117334008216858, 0.21635431051254272, -1.119292140007019, 0.2108927071094513, -1.1212502717971802, 0.20543111860752106, -1.1232085227966309, 0.19996954500675201, -1.1251667737960815, 0.19450800120830536, -1.1271250247955322, 0.1890464574098587, -1.1290833950042725, 0.18358494341373444, -1.1310417652130127, 0.17812344431877136, -1.133000135421753, 0.17266196012496948, -1.1349586248397827, 0.16720050573349, -1.1369171142578125, 0.1617390662431717, -1.1388757228851318, 0.1562776416540146, -1.1408344507217407, 0.15081623196601868, -1.14279305934906, 0.14535485208034515, -1.1447519063949585, 0.13989348709583282, -1.1467106342315674, 0.13443215191364288, -1.1486696004867554, 0.12897083163261414, -1.1506284475326538, 0.12350952625274658, -1.1525874137878418, 0.11804824322462082, -1.1545464992523193, 0.11258698254823685, -1.1565055847167969, 0.10712573677301407, -1.1584646701812744, 0.10166450589895248, -1.1604238748550415, 0.09620329737663269, -1.1623831987380981, 0.09074210375547409, -1.1643424034118652, 0.08528092503547668, -1.1663017272949219, 0.07981976866722107, -1.168261170387268, 0.07435861974954605, -1.1702206134796143, 0.06889748573303223, -1.1721800565719604, 0.0634363666176796, -1.1741394996643066, 0.05797526240348816, -1.1760990619659424, 0.05251416563987732, -1.1780586242675781, 0.047053080052137375, -1.1800181865692139, 0.04159200191497803, -1.1819777488708496, 0.03613093122839928, -1.183937430381775, 0.030669867992401123, -1.1858971118927002, 0.025208808481693268, -1.187856674194336, 0.01974775642156601, -1.1898163557052612, 0.014286705292761326, -1.1917760372161865, 0.008825656026601791, -1.1937357187271118, 0.003364608157426119, -1.195695400238037, -0.0020964404102414846, -1.197655200958252, -0.007557490840554237, -1.1996148824691772, -0.01301854383200407, -1.201574444770813, -0.01847960241138935, -1.2035341262817383, -0.023940663784742355, -1.2054938077926636, -0.029401734471321106, -1.2074534893035889, -0.034862808883190155, -1.2094130516052246, -0.0403238944709301, -1.2113726139068604, -0.04578499123454094, -1.213332176208496, -0.051246095448732376, -1.2152917385101318, -0.05670721456408501, -1.217251181602478, -0.06216834485530853, -1.2192106246948242, -0.06762948632240295, -1.2211700677871704, -0.07309064269065857, -1.2231295108795166, -0.07855182141065598, -1.2250888347625732, -0.08401300758123398, -1.2270481586456299, -0.08947420865297318, -1.229007363319397, -0.09493543207645416, -1.230966567993164, -0.10039666295051575, -1.2329257726669312, -0.10585791617631912, -1.2348848581314087, -0.11131918430328369, -1.2368439435958862, -0.11678047478199005, -1.2388030290603638, -0.12224177271127701, -1.2407619953155518, -0.12770308554172516, -1.2427209615707397, -0.1331644207239151, -1.2446798086166382, -0.13862577080726624, -1.2466386556625366, -0.14408713579177856, -1.248597502708435, -0.1495485156774521, -1.250556230545044, -0.1550098955631256, -1.2525149583816528, -0.16047129034996033, -1.2544736862182617, -0.16593270003795624, -1.2564324140548706, -0.17139410972595215, -1.2583911418914795, -0.17685551941394806, -1.2603497505187988, -0.18231694400310516, -1.2623084783554077]
        

        # Try to adapt dT
        #self.trajectory = [0.20391693711280823, -1.296834111213684, 0.20918753743171692, -1.2963696718215942, 0.2144581377506256, -1.2959052324295044, 0.2197287231683731, -1.295440673828125, 0.2249993234872818, -1.2949762344360352, 0.2302699238061905, -1.2945117950439453, 0.23554052412509918, -1.2940473556518555, 0.24081112444400787, -1.2935829162597656, 0.24608172476291656, -1.2931185960769653, 0.25135233998298645, -1.2926541566848755, 0.25662294030189514, -1.2921898365020752, 0.26189354062080383, -1.2917253971099854, 0.2671641409397125, -1.291261076927185, 0.2724347710609436, -1.2907968759536743, 0.2777053713798523, -1.290332555770874, 0.2829760015010834, -1.2898683547973633, 0.28824660181999207, -1.289404034614563, 0.29351723194122314, -1.2889399528503418, 0.2987878620624542, -1.288475751876831, 0.3040584921836853, -1.2880116701126099, 0.3093291223049164, -1.2875475883483887, 0.31459975242614746, -1.2870835065841675, 0.31987038254737854, -1.2866194248199463, 0.3251410126686096, -1.2861554622650146, 0.3304116725921631, -1.285691499710083, 0.33568230271339417, -1.285227656364441, 0.34095296263694763, -1.2847636938095093, 0.3462235927581787, -1.2842998504638672, 0.3514942526817322, -1.2838361263275146, 0.35676491260528564, -1.2833722829818726, 0.3620355725288391, -1.28290855884552, 0.3673062324523926, -1.2824448347091675, 0.37257692217826843, -1.2819812297821045, 0.3778475821018219, -1.281517505645752, 0.38311824202537537, -1.281053900718689, 0.3883889317512512, -1.280590295791626, 0.3936595916748047, -1.2801268100738525, 0.39893028140068054, -1.279663324356079, 0.4042009711265564, -1.2791998386383057, 0.40947166085243225, -1.2787363529205322, 0.4147423207759857, -1.2782728672027588, 0.4200130105018616, -1.277809500694275, 0.4252837002277374, -1.2773460149765015, 0.4305543899536133, -1.2768826484680176, 0.4358251094818115, -1.2764192819595337, 0.4410957992076874, -1.2759559154510498, 0.44636648893356323, -1.2754926681518555, 0.4516371786594391, -1.2750293016433716, 0.45690789818763733, -1.2745660543441772, 0.4621785879135132, -1.2741026878356934, 0.46744927763938904, -1.273639440536499, 0.4727199971675873, -1.2731761932373047, 0.47799068689346313, -1.2727128267288208, 0.483261376619339, -1.2722495794296265, 0.48853209614753723, -1.2717863321304321, 0.4938027858734131, -1.2713230848312378, 0.49907350540161133, -1.270859718322754, 0.5043441653251648, -1.2703964710235596, 0.509614884853363, -1.2699332237243652, 0.5148856043815613, -1.2694698572158813, 0.5201562643051147, -1.269006609916687, 0.525426983833313, -1.2685432434082031, 0.5306977033615112, -1.2680798768997192, 0.5359683632850647, -1.267616629600525, 0.5412390828132629, -1.267153263092041, 0.5465097427368164, -1.2666897773742676, 0.5517804622650146, -1.2662264108657837, 0.5570511221885681, -1.2657629251480103, 0.5623218417167664, -1.2652995586395264, 0.5675925016403198, -1.264836072921753, 0.5728632211685181, -1.26437246799469, 0.5781338810920715, -1.2639089822769165, 0.583404541015625, -1.2634453773498535, 0.5886752009391785, -1.2629817724227905, 0.5939458608627319, -1.2625181674957275, 0.5992165803909302, -1.2620545625686646, 0.6044872403144836, -1.261590838432312, 0.6097579002380371, -1.2611271142959595, 0.6150285601615906, -1.2606632709503174, 0.620299220085144, -1.2601995468139648, 0.6255698204040527, -1.2597357034683228, 0.6308404803276062, -1.2592717409133911, 0.6361111402511597, -1.258807897567749, 0.6413818001747131, -1.2583439350128174, 0.6466524004936218, -1.2578799724578857, 0.6519230604171753, -1.2574158906936646, 0.657193660736084, -1.2569518089294434, 0.6624643206596375, -1.2564877271652222, 0.6677349209785461, -1.256023645401001, 0.6730055809020996, -1.2555594444274902, 0.6782761812210083, -1.2550952434539795, 0.683546781539917, -1.2546310424804688, 0.6888174414634705, -1.2541667222976685, 0.6940880417823792, -1.2537024021148682, 0.6993586421012878, -1.2532380819320679, 0.7046292424201965, -1.2527737617492676, 0.7098998427391052, -1.2523094415664673, 0.7151704430580139, -1.2518450021743774, 0.7204410433769226, -1.2513805627822876, 0.7257116436958313, -1.2509161233901978]
        
        nb_pos = len(self.trajectory)

        # Not looking outside of the array
        if (self.pos+3) > nb_pos :
            self.vX = 0.0
            self.vY = 0.0
            self.vYaw = 0.0

        #Calculate the velocity commands from the trajectory (difference between two consecutive position divided by dT)
        elif self.wait > 200 :
            if (self.pos == 0) :
                self.start_time = time.time()
            print("Time since first call : ", time.time() - self.start_time)    
            print("Time since the previous call : ", time.time()-self.time)
            self.time = time.time()
            print(self.pos)
            self.vX = (self.trajectory[self.pos+2]-self.trajectory[self.pos])/self.dT
            self.vY = (self.trajectory[self.pos+3]-self.trajectory[self.pos+1])/self.dT
            print(self.vX, self.vY)
            self.vYaw = 0
            self.count += 1
            #if self.count == 6 : # To make time correspondance
            self.pos += 2
            #self.count = 0
        
        else :
            self.wait += 1
            print(self.wait)

        # Try to set constant velocities
        # print(self.count)
        # if self.count < 1000 :
        #     self.vX = self.speed
        #     self.vY = 0.0
        #     self.vYaw = 0.0
        #     self.count += 1
        
        # else :
        #     self.vX = 0.0
        #     self.vY = self.speed
        #     self.vYaw = 0.0
        #     self.count += 1

        # if self.count == 2000 :
        #     self.count = 0

        #self.v_gp = np.array([[- self.vY, - self.vX, 0.0, 0.0, 0.0, - self.vYaw]]).T
        self.v_ref = np.array([[self.vX, self.vY, 0.0, 0.0, 0.0, self.vYaw]]).T

        #self.v_ref = self.alpha * self.v_gp + (1-self.alpha) * self.v_ref
        #self.v_ref[(self.v_ref < 0.005) & (self.v_ref > -0.005)] = 0.0

        #################################################################################################

        # if self.gp.L1Button.value:  # If L1 is pressed the orientation of the base is controlled
        #     self.v_gp = np.array(
        #         [[0.0, 0.0, - self.vYaw * 0.25, - self.vX * 5, - self.vY * 2, 0.0]]).T
        # else:  # Otherwise the Vx, Vy, Vyaw is controlled
        #     self.v_gp = np.array(
        #         [[- self.vY, - self.vX, 0.0, 0.0, 0.0, - self.vYaw]]).T



        # # Reduce the size of the support polygon by pressing Start
        # if self.gp.startButton.value:
        #     self.reduced = not self.reduced

        # # Switch to safety controller if the Back key is pressed
        # if self.gp.backButton.value:
        #     self.stop = True

        # # Switch gaits
        # if self.gp.northButton.value:
        #     self.northButton = True
        #     self.eastButton = False
        #     self.southButton = False
        #     self.westButton = False
        # elif self.gp.eastButton.value:
        #     self.northButton = False
        #     self.eastButton = True
        #     self.southButton = False
        #     self.westButton = False
        # elif self.gp.southButton.value:
        #     self.northButton = False
        #     self.eastButton = False
        #     self.southButton = True
        #     self.westButton = False
        # elif self.gp.westButton.value:
        #     self.northButton = False
        #     self.eastButton = False
        #     self.southButton = False
        #     self.westButton = True

        # # Low pass filter to slow down the changes of velocity when moving the joysticks
        #self.v_ref = self.alpha * self.v_gp + (1-self.alpha) * self.v_ref
        #self.v_ref[(self.v_ref < 0.005) & (self.v_ref > -0.005)] = 0.0

        return 0

    def handle_v_switch(self, k):
        """Handle the change of reference velocity according to the chosen predefined velocity profile

        Args:
            k (int): numero of the current iteration
        """

        i = 1
        while (i < self.k_switch.shape[0]) and (self.k_switch[i] <= k):
            i += 1
        if (i != self.k_switch.shape[0]):
            self.apply_velocity_change(k, i)

    def apply_velocity_change(self, k, i):
        """Change the velocity reference sent to the robot
        4-th order polynomial: zero force and force velocity at start and end
        (bell-like force trajectory)

        Args:
            k (int): numero of the current iteration
            i (int): numero of the active phase of the reference velocity profile
        """

        ev = k - self.k_switch[i-1]
        t1 = self.k_switch[i] - self.k_switch[i-1]
        A3 = 2 * (self.v_switch[:, (i-1):i] -
                  self.v_switch[:, i:(i+1)]) / t1**3
        A2 = (-3/2) * t1 * A3
        self.v_ref = self.v_switch[:, (i-1):i] + A2*ev**2 + A3*ev**3

        return 0

    def update_v_ref_predefined(self, k_loop, velID):
        """Update the reference velocity of the robot along X, Y and Yaw in local frame
        according to a predefined sequence

        Args:
            k_loop (int): numero of the current iteration
            velID (int): identifier of the current velocity profile to be able to handle different scenarios
        """

        if velID == 0:
            if (k_loop == 0):
                self.k_switch = np.array(
                    [0, 500, 2000, 3000, 4000, 13000, 20000, 30000])
                self.v_switch = np.array([[0.0, 0.0, 0.25, 0.25, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0,
                                              0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
        elif velID == 1:
            if (k_loop == 0):
                V_max = 0.5
                self.k_switch = np.array([0, 1000, 3000, 8000, 12000, 16000, 20000, 22000,
                                          23000, 26000, 30000, 33000, 34000, 40000, 41000, 43000,
                                          44000, 45000])
                self.v_switch = np.zeros((6, self.k_switch.shape[0]))
                self.v_switch[0, :] = np.array([0.0, 0.0, V_max, V_max, 0.0, 0.0, 0.0,
                                                0.0, -V_max, -V_max, 0.0, 0.0, 0.0, V_max, V_max, V_max,
                                                V_max, V_max])
                self.v_switch[1, :] = np.array([0.0, 0.0,  0.0, 0.0, -V_max, -V_max, 0.0,
                                                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                0.0, 0.0])
                self.v_switch[5, :] = np.array([0.0, 0.0,  0.3, 0.3, 0.3, 0.0, 0.0, 0.0,
                                                0.0, 0.0, 0.0, 0.0, 0.3, 0.3, 0.0, 0.0,
                                                -0.3, 0.0])
        elif velID == 2:
            self.k_switch = np.array([0, 10000, 20000, 30000])
            self.v_switch = np.array([[0.0, 0.5, 0.0, 0.0],
                                      [0.0, 0.0, 0.0, 0.0],
                                      [0.0, 0.0, 0.0, 0.0],
                                      [0.0, 0.0, 0.0, 0.0],
                                      [0.0, 0.0, 0.0, 0.0],
                                      [0.0, 0.0, 0.0, 0.0]])
        elif velID == 3:
            if (k_loop == 0):
                self.k_switch = np.array([0, 1000, 2000, 7000, 26000, 30000])
                self.v_switch = np.array([[0.0, 0.0,  0.0, 0.3, 0.3, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.3, 0.0, 0.0, 0.0]])
        elif velID == 4:
            if (k_loop == 0):
                self.k_switch = np.array([0, 1000, 3000, 7000, 9000, 30000])
                self.v_switch = np.array([[0.0, 0.0,  1.5, 1.5, 1.5, 1.5],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.4, 0.4]])
        elif velID == 5:
            if (k_loop == 0):
                """self.k_switch = np.array([0, 500, 1500, 2600, 5000, 6500, 8000])
                self.v_switch = np.array([[0.0, 0.0,  0.7, 0.6, 0.3, 0.3, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.4, 0.6, 0.0, 0.0]])"""
                self.k_switch = np.array([0, 500, 1500, 2600, 5000, 6500, 7000, 8000, 9000])
                self.v_switch = np.array([[0.0, 0.0,  0.5, 0.6, 0.3, 0.6, -0.5, 0.7, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.2, 0.7, 0.7, 0.0, -0.4, -0.6, 0.0]])

        elif velID == 6:
            if (k_loop == 0):
                self.k_switch = np.array(
                    [0, 1000, 2500, 5000, 7500, 8000, 10000])
                self.v_switch = np.array([[0.0, 0.0,  0.8, 0.4, 0.8, 0.8, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.55, 0.3, 0.0, 0.0]])
        # My test
        elif velID == 7:
            if (k_loop == 0):
                self.k_switch = np.array(
                    [0, 100, 250, 500, 750, 800, 1000])
                self.v_switch = np.array([[0.4, 0.0,  0.4, 0.0, 0.4, 0.0, 0.4],
                                          [0.0, 0.4,  0.0, 0.4, 0.0, 0.4, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0],
                                          [0.0, 0.0,  0.0, 0.0, 0.0, 0.0, 0.0]])

        self.handle_v_switch(k_loop)
        return 0

    def update_v_ref_multi_simu(self, k_loop):
        """Update the reference velocity of the robot along X, Y and Yaw in local frame
        according to a predefined sequence

        Args:
            k_loop (int): number of MPC iterations since the start of the simulation
            velID (int): Identifier of the current velocity profile to be able to handle different scenarios
        """

        # Moving forwards
        """if k_loop == self.k_mpc*16*3:
            self.v_ref = np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0]]).T"""

        beta_x = int(max(abs(self.Vx_ref)*10000, 100.0))
        alpha_x = np.max([np.min([(k_loop-self.k_mpc*16*3)/beta_x, 1.0]), 0.0])

        beta_y = int(max(abs(self.Vy_ref)*10000, 100.0))
        alpha_y = np.max([np.min([(k_loop-self.k_mpc*16*3)/beta_y, 1.0]), 0.0])

        beta_w = int(max(abs(self.Vw_ref)*2500, 100.0))
        alpha_w = np.max([np.min([(k_loop-self.k_mpc*16*3)/beta_w, 1.0]), 0.0])

        # self.v_ref = np.array([[0.3*alpha, 0.0, 0.0, 0.0, 0.0, 0.0]]).T
        self.v_ref = np.array(
            [[self.Vx_ref*alpha_x, self.Vy_ref*alpha_y, 0.0, 0.0, 0.0, self.Vw_ref*alpha_w]]).T

        return 0
